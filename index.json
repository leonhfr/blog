[
  {"body":"Shell scripts are awesome, as we know. Now, we have nice shell scripts that self document. But if you\u0026rsquo;re anything like me, then you have lots of them in your ~/bin or wherever you put them. One reason for that is that each script can do one thing and one thing only. Wouldn\u0026rsquo;t it be nice if we could group different functionalities in the same files?\nSome CLIs already do that with subcommands. Think git add or go get. We\u0026rsquo;re going to check how to simply have subcommands with shell scripts.\nFirst, we put each functionality in its own function. Each function should have the prefix sub_. Of course, we have the documentation at the top and a help function to parse and print it. Note that each function also has a comment.\n#!/bin/bash ### ### my-script — does several things well ### ### Usage: my-script [options] \u0026lt;subcommand\u0026gt; ### ### Options: ### -h,--help: Show this message. ### ### Subcommands: ### help: show this message sub_help() { sed -rn \u0026#39;s/^### ?//p\u0026#39; \u0026#34;$0\u0026#34; } ### foo: do some the foo thing sub_foo() { echo \u0026#34;Running the foo subcommand\u0026#34; } ### bar: do the bar thing, which is related but different to the foo thing sub_bar() { echo \u0026#34;Running the bar subcommand\u0026#34; echo \u0026#34;We can use first argument with \u0026#39;$1\u0026#39;\u0026#34; echo \u0026#34;The second argument is \u0026#39;$2\u0026#39;, and so on\u0026#34; } Then, at the end of the script, we put this piece of magic:\nSCRIPT_NAME=$(basename $0) SUBCOMMAND=$1 case $SUBCOMMAND in \u0026#34;\u0026#34; | \u0026#34;-h\u0026#34; | \u0026#34;--help\u0026#34;) sub_help ;; *) shift sub_${SUBCOMMAND} $@ if [ $? = 127 ]; then echo \u0026#34;Error: \u0026#39;$SUBCOMMAND\u0026#39; is not a known subcommand.\u0026#34; \u0026gt;\u0026amp;2 echo \u0026#34; Run \u0026#39;$SCRIPT_NAME --help\u0026#39; for a list of known subcommands.\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi ;; esac What\u0026rsquo;s happening here? Some notes:\nwe store the name of the script with basename; we use a bash case statement; we check the first argument, the subcommand, if it\u0026rsquo;s one of -h, --help or an empty string, we print the help and exit; otherwise (see the *) which is the default case), we: use the shift command to shift positional parameters to the left, so command name which was in $1 is placed at $0 instead, and so on for other arguments; we execute the subcommand function with the repositioned arguments $@; if the subcommand doesn\u0026rsquo;t exist, we print an error message using the script name. Now the cool thing about this is that not only can we add as many subcommands as we like, but the help message also gets updated with the subcommand comments, so the script is still self documenting.\nPrinting the help:\n$ my-script --help my-script — does several things well Usage: my-script [options] \u0026lt;subcommand\u0026gt; Options: -h,--help: Show this message. Subcommands: help: show this message foo: do some the foo thing bar: do the bar thing, which is related but different to the foo thing Running the bar subcommand:\n$ my-script bar hello world Running the bar subcommand We can use first argument with \u0026#39;hello\u0026#39; The second argument is \u0026#39;world\u0026#39;, and so on Command who doesn\u0026rsquo;t exist:\n$ my-script hello Error: \u0026#39;hello\u0026#39; is not a known subcommand. Run \u0026#39;my-script --help\u0026#39; for a list of known subcommands. ","title":"Simple shell script subcommands","url":"https://leonh.fr/simple-shell-script-subcommands/"}, {"body":"Shell scripts are awesome. They are so useful to automate repetitive and boring work. The hardest thing about them is documentation though. How often have you written one, put it in the bin directory and forgot all about it? How cool would it be to have a help message for them?\nWe could, of course, implement it with a bunch of echo calls. But there\u0026rsquo;s a neat trick. I originally learned it in a blog post by Egor Kovetskiy, but it seems it\u0026rsquo;s not available anymore. As it was very useful to me, I\u0026rsquo;m putting it out there again.\nAdd your help message as comments at the top of your file, right after the shebang.\n#!/bin/bash ### ### my-script — does one thing well ### ### Usage: ### my-script \u0026lt;input\u0026gt; \u0026lt;output\u0026gt; ### ### Options: ### \u0026lt;input\u0026gt; Input file to read. ### \u0026lt;output\u0026gt; Output file to write. Use \u0026#39;-\u0026#39; for stdout. ### -h Show this message. Next, we need to get this message using sed.\nsed -rn \u0026#39;s/^### ?//p\u0026#39; \u0026#34;$0\u0026#34; What\u0026rsquo;s happening here:\n$0 is the filename of the file that is being executed; -r flag means using extended regular expressions; -n flag prevents sed from echoing each line to the standard output; s stands for substitution of the following pattern; / defines the start and end of the pattern; ^### ? matches a string starting with ### followed by an optional space; // defines the substitution string, here an empty string; p prints the result of the substitution. Now, we just need to call this if an -h argument or no arguments are passed.\nif [[ $# == 0 ]] || [[ \u0026#34;$1\u0026#34; == \u0026#34;-h\u0026#34; ]]; then sed -rn \u0026#39;s/^### ?//p\u0026#39; \u0026#34;$0\u0026#34; exit 0 fi Hope it helps!\n","title":"Help message for shell scripts","url":"https://leonh.fr/help-message-for-shell-scripts/"}, {"body":"I am an architect (as in, buildings) turned software engineer. I\u0026rsquo;m currently working at UserZoom and was previously working at AdSecure.\nI code in TypeScript, Golang, and Rust.\nGithub: leonhfr\n","title":"About","url":"https://leonh.fr/about/"}, {"body":" \u0026ldquo;Hello, friend?\u0026rdquo; That\u0026rsquo;s lame. Maybe I should give you a name\u0026hellip; But that\u0026rsquo;s a slippery slope. You\u0026rsquo;re only in my head. We have to remember that\u0026hellip; Shit. It\u0026rsquo;s actually happened. I\u0026rsquo;m talking to an imaginary person.\n— Mr. Robot S01E01\nThis is the start of yet another developer blog. It\u0026rsquo;s been a long time coming as I have always wanted to have a blog but I have been postponing it.\nPowered by Hugo with theme Anubis.\nThis blog uses Github features extensively:\nGithub Pages for hosting Github Actions for deployment Github issues for comments (via utteranc.es) ","title":"Hello, friend","url":"https://leonh.fr/hello-friend/"}
]
