<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leon h</title>
    <link>https://leonh.fr/</link>
    <description>leon h</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Oct 2022 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://leonh.fr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interrupting scanning in Go</title>
      <link>https://leonh.fr/interrupting-scanning-in-go/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leonh.fr/interrupting-scanning-in-go/</guid>
      <description>&lt;p&gt;&lt;code&gt;bufio.Scanner&lt;/code&gt; is &amp;ldquo;a convenient interface for reading data such as a file of newline-delimited lines of text&amp;rdquo;. It will stop scanning either by reaching the end of the input or an error. The usual pattern goes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://henvic.dev/posts/signal-notify-context/&#34;&gt;https://henvic.dev/posts/signal-notify-context/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/os/signal&#34;&gt;https://pkg.go.dev/os/signal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/golangspec/in-depth-introduction-to-bufio-scanner-in-golang-55483bb689b4&#34;&gt;https://medium.com/golangspec/in-depth-introduction-to-bufio-scanner-in-golang-55483bb689b4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/37079639/how-we-can-stop-bufio-scanning-at-golang&#34;&gt;https://stackoverflow.com/questions/37079639/how-we-can-stop-bufio-scanning-at-golang&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ctx, stop := signal.&lt;span style=&#34;color:#447fcf&#34;&gt;NotifyContext&lt;/span&gt;(context.&lt;span style=&#34;color:#447fcf&#34;&gt;Background&lt;/span&gt;(), os.Interrupt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;stop&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ctx = context.&lt;span style=&#34;color:#447fcf&#34;&gt;WithValue&lt;/span&gt;(ctx, cmd.NameKey, name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ctx = context.&lt;span style=&#34;color:#447fcf&#34;&gt;WithValue&lt;/span&gt;(ctx, cmd.VersionKey, version)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ctx = context.&lt;span style=&#34;color:#447fcf&#34;&gt;WithValue&lt;/span&gt;(ctx, cmd.AuthorKey, author)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err := cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;Execute&lt;/span&gt;(ctx); err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.&lt;span style=&#34;color:#447fcf&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;honeybadger: %v&amp;#34;&lt;/span&gt;, err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		uciOut := os.Stdout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		uciIn, pipe := io.&lt;span style=&#34;color:#447fcf&#34;&gt;Pipe&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// graceful shutdown when context canceled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// sending EOF to the UCI scanner by closing the pipe
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;() { _, _ = io.&lt;span style=&#34;color:#447fcf&#34;&gt;Copy&lt;/span&gt;(pipe, os.Stdin) }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;() { &amp;lt;-ctx.&lt;span style=&#34;color:#447fcf&#34;&gt;Done&lt;/span&gt;(); pipe.&lt;span style=&#34;color:#447fcf&#34;&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		e := engine.&lt;span style=&#34;color:#447fcf&#34;&gt;New&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			engine.&lt;span style=&#34;color:#447fcf&#34;&gt;WithName&lt;/span&gt;(fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;%s v%s&amp;#34;&lt;/span&gt;, name, version)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			engine.&lt;span style=&#34;color:#447fcf&#34;&gt;WithAuthor&lt;/span&gt;(author),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			engine.&lt;span style=&#34;color:#447fcf&#34;&gt;WithLogger&lt;/span&gt;(uci.&lt;span style=&#34;color:#447fcf&#34;&gt;Logger&lt;/span&gt;(uciOut)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		uci.&lt;span style=&#34;color:#447fcf&#34;&gt;Run&lt;/span&gt;(ctx, e, uciIn, uciOut)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// uci
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;Run&lt;/span&gt;(ctx context.Context, e Engine, r io.Reader, w io.Writer) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	respond := &lt;span style=&#34;color:#447fcf&#34;&gt;newResponder&lt;/span&gt;(w)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; scanner := bufio.&lt;span style=&#34;color:#447fcf&#34;&gt;NewScanner&lt;/span&gt;(r); scanner.&lt;span style=&#34;color:#447fcf&#34;&gt;Scan&lt;/span&gt;(); {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		c := &lt;span style=&#34;color:#447fcf&#34;&gt;parse&lt;/span&gt;(strings.&lt;span style=&#34;color:#447fcf&#34;&gt;Fields&lt;/span&gt;(scanner.&lt;span style=&#34;color:#447fcf&#34;&gt;Text&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; c == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		c.&lt;span style=&#34;color:#447fcf&#34;&gt;run&lt;/span&gt;(ctx, e, respond)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; _, ok := c.(commandQuit); ok {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Simple shell script subcommands</title>
      <link>https://leonh.fr/simple-shell-script-subcommands/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leonh.fr/simple-shell-script-subcommands/</guid>
      <description>&lt;p&gt;Shell scripts are awesome, &lt;a href=&#34;https://leonh.fr/help-message-for-shell-scripts/&#34;&gt;as we know&lt;/a&gt;. Now, we have nice shell scripts that self document. But if you&amp;rsquo;re anything like me, then you have lots of them in your &lt;code&gt;~/bin&lt;/code&gt; or wherever you put them. One reason for that is that each script can do one thing and one thing only. Wouldn&amp;rsquo;t it be nice if we could group different functionalities in the same file?&lt;/p&gt;
&lt;p&gt;Some CLIs already do that with subcommands. Think &lt;code&gt;git add&lt;/code&gt; or &lt;code&gt;go get&lt;/code&gt;. We&amp;rsquo;re going to check how to simply have subcommands with shell scripts.&lt;/p&gt;
&lt;p&gt;First, we put each functionality in its own function. Each function should be prefixed &lt;code&gt;sub_&lt;/code&gt;. Of course, we have the documentation at the top and a help function to parse and print it. Note that each function also has a comment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### my-script — does several things well&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### Usage: my-script [options] &amp;lt;subcommand&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### Options:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###   -h,--help: Show this message.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### Subcommands:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### help: show this message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub_help() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sed -rn &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;s/^### ?//p&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### foo: do some the foo thing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub_foo() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Running the foo subcommand&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### bar: do the bar thing, which is related but different to the foo thing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub_bar() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Running the bar subcommand&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;We can use first argument with &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;The second argument is &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$2&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;, and so on&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, at the end of the script, we put this piece of magic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;SCRIPT_NAME&lt;/span&gt;=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;basename &lt;span style=&#34;color:#40ffff&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;SUBCOMMAND&lt;/span&gt;=&lt;span style=&#34;color:#40ffff&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$SUBCOMMAND&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;-h&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--help&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sub_help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#24909d&#34;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sub_&lt;span style=&#34;color:#ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;SUBCOMMAND&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; [ &lt;span style=&#34;color:#40ffff&#34;&gt;$?&lt;/span&gt; = &lt;span style=&#34;color:#3677a9&#34;&gt;127&lt;/span&gt; ]; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Error: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$SUBCOMMAND&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39; is not a known subcommand.&amp;#34;&lt;/span&gt; &amp;gt;&amp;amp;&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;       Run &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$SCRIPT_NAME&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt; --help&amp;#39; for a list of known subcommands.&amp;#34;&lt;/span&gt; &amp;gt;&amp;amp;&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#24909d&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s happening here? Some notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we store the name of the script with &lt;code&gt;basename&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;we use a bash &lt;a href=&#34;https://linuxize.com/post/bash-case-statement/&#34;&gt;case statement&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;we check the first argument, the subcommand, if it&amp;rsquo;s one of &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt; or an empty string, we print the help and exit;&lt;/li&gt;
&lt;li&gt;otherwise (see the &lt;code&gt;*)&lt;/code&gt; which is the default case), we:
&lt;ul&gt;
&lt;li&gt;use the &lt;code&gt;shift&lt;/code&gt; command to shift positional parameters to the left, so command name which was in &lt;code&gt;$1&lt;/code&gt; is placed at &lt;code&gt;$0&lt;/code&gt; instead, and so on for other arguments;&lt;/li&gt;
&lt;li&gt;we execute the subcommand function with the repositioned arguments &lt;code&gt;$@&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;if the subcommand doesn&amp;rsquo;t exist, we print an error message using the script name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now the cool thing about this is that not only can we add as many subcommands as we like, but the help message also gets updated with the subcommand comments, so the script is still self documenting.&lt;/p&gt;
&lt;p&gt;Printing the help:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ my-script --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my-script — does several things well
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: my-script [options] &amp;lt;subcommand&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -h,--help: Show this message.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Subcommands:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;help: show this message
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;do&lt;/span&gt; some the foo thing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bar: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;do&lt;/span&gt; the bar thing, which is related but different to the foo thing
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the bar subcommand:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ my-script bar hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Running the bar subcommand
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We can use first argument with &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The second argument is &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;, and so on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Command who doesn&amp;rsquo;t exist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ my-script hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; is not a known subcommand.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Run &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;my-script --help&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; a list of known subcommands.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Help message for shell scripts</title>
      <link>https://leonh.fr/help-message-for-shell-scripts/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leonh.fr/help-message-for-shell-scripts/</guid>
      <description>&lt;p&gt;Shell scripts are awesome. They are so useful to automate repetitive and boring work. The hardest thing about them is documentation though. How often have you written one, put it in the &lt;code&gt;bin&lt;/code&gt; directory and forgot all about it? How cool would it be to have a help message for them?&lt;/p&gt;
&lt;p&gt;We could, of course, implement it with a bunch of echo calls. But there&amp;rsquo;s a neat trick. I originally learned it in a blog post by &lt;a href=&#34;https://github.com/kovetskiy&#34;&gt;Egor Kovetskiy&lt;/a&gt;, but it seems it&amp;rsquo;s not available anymore. As it was very useful to me, I&amp;rsquo;m putting it out there again.&lt;/p&gt;
&lt;p&gt;Add your help message as comments at the top of your file, right after the shebang.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### my-script — does one thing well&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### Usage:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###   my-script &amp;lt;input&amp;gt; &amp;lt;output&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;### Options:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###   &amp;lt;input&amp;gt;   Input file to read.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###   &amp;lt;output&amp;gt;  Output file to write. Use &amp;#39;-&amp;#39; for stdout.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;###   -h        Show this message.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need to get this message using &lt;code&gt;sed&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -rn &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;s/^### ?//p&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s happening here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt; is the filename of the file that is being executed;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; flag means using extended regular expressions;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt; flag prevents &lt;code&gt;sed&lt;/code&gt; from echoing each line to the standard output;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; stands for substitution of the following pattern;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; defines the start and end of the pattern;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^### ?&lt;/code&gt; matches a string starting with &lt;code&gt;###&lt;/code&gt; followed by an optional space;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt; defines the substitution string, here an empty string;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; prints the result of the substitution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, we just need to call this if an &lt;code&gt;-h&lt;/code&gt; argument or no arguments are passed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; [[ &lt;span style=&#34;color:#40ffff&#34;&gt;$#&lt;/span&gt; == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; ]] || [[ &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt; == &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;-h&amp;#34;&lt;/span&gt; ]]; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sed -rn &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;s/^### ?//p&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#24909d&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hope it helps!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://leonh.fr/about/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://leonh.fr/about/</guid>
      <description>&lt;p&gt;I am an architect (as in, buildings) turned software engineer. I&amp;rsquo;m currently working at &lt;a href=&#34;https://www.userzoom.com/&#34;&gt;UserZoom&lt;/a&gt; and was previously working at &lt;a href=&#34;https://www.adsecure.com/&#34;&gt;AdSecure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I code in TypeScript, Golang, and Rust.&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/leonhfr&#34;&gt;leonhfr&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello, friend</title>
      <link>https://leonh.fr/hello-friend/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://leonh.fr/hello-friend/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hello, friend?&amp;rdquo; That&amp;rsquo;s lame.
Maybe I should give you a name&amp;hellip;
But that&amp;rsquo;s a slippery slope.
You&amp;rsquo;re only in my head.
We have to remember that&amp;hellip;
Shit.
It&amp;rsquo;s actually happened.
I&amp;rsquo;m talking to an imaginary person.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;— Mr. Robot S01E01&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the start of yet another developer blog. It&amp;rsquo;s been a long time coming as I have always wanted to have a blog but I have been postponing it.&lt;/p&gt;
&lt;p&gt;Powered by &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; with theme &lt;a href=&#34;https://github.com/Mitrichius/hugo-theme-anubis&#34;&gt;Anubis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog uses Github features extensively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github Pages for hosting&lt;/li&gt;
&lt;li&gt;Github Actions for deployment&lt;/li&gt;
&lt;li&gt;Github issues for comments (via &lt;a href=&#34;https://utteranc.es/&#34;&gt;utteranc.es&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
